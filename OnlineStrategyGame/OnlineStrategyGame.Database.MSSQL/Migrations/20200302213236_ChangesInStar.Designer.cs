// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStrategyGame.Database.MSSQL;

namespace OnlineStrategyGame.Database.MSSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200302213236_ChangesInStar")]
    partial class ChangesInStar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Buildings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AluminiumFactory")
                        .HasColumnType("int");

                    b.Property<int>("AluminiumMine")
                        .HasColumnType("int");

                    b.Property<int>("AntimatterTank")
                        .HasColumnType("int");

                    b.Property<int>("CarbonMine")
                        .HasColumnType("int");

                    b.Property<int>("Cities")
                        .HasColumnType("int");

                    b.Property<int>("CoalPowerStation")
                        .HasColumnType("int");

                    b.Property<int>("Farm")
                        .HasColumnType("int");

                    b.Property<int>("FusionPowerPlant")
                        .HasColumnType("int");

                    b.Property<int>("GrapheneProductionPlant")
                        .HasColumnType("int");

                    b.Property<int>("Greenhouse")
                        .HasColumnType("int");

                    b.Property<int>("Helium3Extractor")
                        .HasColumnType("int");

                    b.Property<int>("Helium3Tank")
                        .HasColumnType("int");

                    b.Property<int>("HydrogenExtractor")
                        .HasColumnType("int");

                    b.Property<int>("HydrogenPowerPlant")
                        .HasColumnType("int");

                    b.Property<int>("HydrogenTank")
                        .HasColumnType("int");

                    b.Property<int>("Laboratory")
                        .HasColumnType("int");

                    b.Property<int?>("MoonId")
                        .HasColumnType("int");

                    b.Property<int>("NuclearPowerPlant")
                        .HasColumnType("int");

                    b.Property<int>("ParticleAccelerator")
                        .HasColumnType("int");

                    b.Property<int?>("PlanetId")
                        .HasColumnType("int");

                    b.Property<int>("RobotFactory")
                        .HasColumnType("int");

                    b.Property<int>("Shipyard")
                        .HasColumnType("int");

                    b.Property<int>("SkyCities")
                        .HasColumnType("int");

                    b.Property<int>("SolarPowerPlant")
                        .HasColumnType("int");

                    b.Property<int>("Terraformer")
                        .HasColumnType("int");

                    b.Property<int>("TitaniumFactory")
                        .HasColumnType("int");

                    b.Property<int>("TitaniumMine")
                        .HasColumnType("int");

                    b.Property<int>("UraniumMine")
                        .HasColumnType("int");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoonId")
                        .IsUnique()
                        .HasFilter("[MoonId] IS NOT NULL");

                    b.HasIndex("PlanetId")
                        .IsUnique()
                        .HasFilter("[PlanetId] IS NOT NULL");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Moon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("RulerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.HasIndex("RulerId");

                    b.ToTable("Moons");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("DistanceToStar")
                        .HasColumnType("real");

                    b.Property<float>("GravitationalAcceleration")
                        .HasColumnType("real");

                    b.Property<float>("Mass")
                        .HasColumnType("real");

                    b.Property<float>("MaxTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinTemperature")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<float>("Radius")
                        .HasColumnType("real");

                    b.Property<string>("RulerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SolarSystemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RulerId");

                    b.HasIndex("SolarSystemId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.RaceBonuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Economy")
                        .HasColumnType("float");

                    b.Property<bool>("EspionageTechnology")
                        .HasColumnType("bit");

                    b.Property<bool>("ExplorationTechnology")
                        .HasColumnType("bit");

                    b.Property<bool>("ExtendedPlanet")
                        .HasColumnType("bit");

                    b.Property<double>("MilitaryDefensive")
                        .HasColumnType("float");

                    b.Property<double>("MilitaryOffensive")
                        .HasColumnType("float");

                    b.Property<bool>("MilitaryTechnology")
                        .HasColumnType("bit");

                    b.Property<double>("Research")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppIdentityUserId")
                        .IsUnique()
                        .HasFilter("[AppIdentityUserId] IS NOT NULL");

                    b.ToTable("RaceBonuses");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Aluminium")
                        .HasColumnType("bigint");

                    b.Property<long>("AluminiumAlloy")
                        .HasColumnType("bigint");

                    b.Property<long>("Antimatter")
                        .HasColumnType("bigint");

                    b.Property<long>("Carbon")
                        .HasColumnType("bigint");

                    b.Property<long>("Food")
                        .HasColumnType("bigint");

                    b.Property<long>("Graphene")
                        .HasColumnType("bigint");

                    b.Property<long>("Helium3")
                        .HasColumnType("bigint");

                    b.Property<long>("Hydrogen")
                        .HasColumnType("bigint");

                    b.Property<int?>("MoonId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanetId")
                        .HasColumnType("int");

                    b.Property<long>("Titanium")
                        .HasColumnType("bigint");

                    b.Property<long>("TitaniumAlloy")
                        .HasColumnType("bigint");

                    b.Property<long>("Uranium")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MoonId")
                        .IsUnique()
                        .HasFilter("[MoonId] IS NOT NULL");

                    b.HasIndex("PlanetId")
                        .IsUnique()
                        .HasFilter("[PlanetId] IS NOT NULL");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.SolarSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CordX")
                        .HasColumnType("int");

                    b.Property<int>("CordY")
                        .HasColumnType("int");

                    b.Property<int>("CordZ")
                        .HasColumnType("int");

                    b.Property<int>("StarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StarId")
                        .IsUnique();

                    b.HasIndex("CordX", "CordY", "CordZ");

                    b.ToTable("SolarSystems");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Star", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppIdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Combat")
                        .HasColumnType("int");

                    b.Property<int>("CombustionDrive")
                        .HasColumnType("int");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<int>("Espionage")
                        .HasColumnType("int");

                    b.Property<int>("Exploration")
                        .HasColumnType("int");

                    b.Property<int>("Gravity")
                        .HasColumnType("int");

                    b.Property<int>("Hiperspace")
                        .HasColumnType("int");

                    b.Property<int>("HyperspaceDrive")
                        .HasColumnType("int");

                    b.Property<int>("ImpulseDrive")
                        .HasColumnType("int");

                    b.Property<int>("Ion")
                        .HasColumnType("int");

                    b.Property<int>("Laser")
                        .HasColumnType("int");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<int>("Plasma")
                        .HasColumnType("int");

                    b.Property<int>("Protective")
                        .HasColumnType("int");

                    b.Property<int>("Quantum")
                        .HasColumnType("int");

                    b.Property<int>("QuantumHardware")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppIdentityUserId")
                        .IsUnique()
                        .HasFilter("[AppIdentityUserId] IS NOT NULL");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Triats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cold")
                        .HasColumnType("bit");

                    b.Property<bool>("DenseAtmosphere")
                        .HasColumnType("bit");

                    b.Property<bool>("Devastated")
                        .HasColumnType("bit");

                    b.Property<bool>("Extended")
                        .HasColumnType("bit");

                    b.Property<bool>("FriendlyAtmosphere")
                        .HasColumnType("bit");

                    b.Property<bool>("GasGiant")
                        .HasColumnType("bit");

                    b.Property<bool>("HightVolcanicActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<int?>("MoonId")
                        .HasColumnType("int");

                    b.Property<bool>("NoAtmosphere")
                        .HasColumnType("bit");

                    b.Property<int?>("PlanetId")
                        .HasColumnType("int");

                    b.Property<bool>("Rocky")
                        .HasColumnType("bit");

                    b.Property<bool>("StrongRadiation")
                        .HasColumnType("bit");

                    b.Property<bool>("ToxicAtmosphere")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MoonId")
                        .IsUnique()
                        .HasFilter("[MoonId] IS NOT NULL");

                    b.HasIndex("PlanetId")
                        .IsUnique()
                        .HasFilter("[PlanetId] IS NOT NULL");

                    b.ToTable("Triats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Buildings", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Moon", "Moon")
                        .WithOne("Buildings")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Buildings", "MoonId");

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Planet", "Planet")
                        .WithOne("Buildings")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Buildings", "PlanetId");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Moon", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Planet", "Planet")
                        .WithMany("Moons")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", "Ruler")
                        .WithMany("Moons")
                        .HasForeignKey("RulerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Planet", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", "Ruler")
                        .WithMany("Planets")
                        .HasForeignKey("RulerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.SolarSystem", "SolarSystem")
                        .WithMany("Planets")
                        .HasForeignKey("SolarSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.RaceBonuses", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", "AppIdentityUser")
                        .WithOne("RaceBonuses")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.RaceBonuses", "AppIdentityUserId");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Resources", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Moon", "Moon")
                        .WithOne("Resources")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Resources", "MoonId");

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Planet", "Planet")
                        .WithOne("Resources")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Resources", "PlanetId");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.SolarSystem", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Star", "Star")
                        .WithOne("SolarSystem")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.SolarSystem", "StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Technology", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.AppIdentityUser", "AppIdentityUser")
                        .WithOne("Technology")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Technology", "AppIdentityUserId");
                });

            modelBuilder.Entity("OnlineStrategyGame.Database.MSSQL.Models.Triats", b =>
                {
                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Moon", "Moon")
                        .WithOne("Triats")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Triats", "MoonId");

                    b.HasOne("OnlineStrategyGame.Database.MSSQL.Models.Planet", "Planet")
                        .WithOne("Triats")
                        .HasForeignKey("OnlineStrategyGame.Database.MSSQL.Models.Triats", "PlanetId");
                });
#pragma warning restore 612, 618
        }
    }
}
